import mongoose from "mongoose";
import CronJob from "../../models/settings/CronJob.js";
import { DriverStatementEmail } from "../DriverStatementEmail.js";
import Company from "../../models/Company.js";
import Invoice from "../../models/Invoice.js";

const SYSTEM_TZ = process.env.CRON_TIMEZONE || Intl.DateTimeFormat().resolvedOptions().timeZone || "UTC";

const dayToCron = {
  Sunday: 0,
  Monday: 1,
  Tuesday: 2,
  Wednesday: 3,
  Thursday: 4,
  Friday: 5,
  Saturday: 6,
};

function parseTimeRange(str) {
  if (!str) return { hour: 9, minute: 0 };
  const [h, m] = str.split(":").map((n) => parseInt(n.trim(), 10));
  return {
    hour: Number.isFinite(h) ? h : 9,
    minute: Number.isFinite(m) ? m : 0,
  };
}

function todayYMD(tz = "UTC") {
  const d = new Date();
  const iso = new Intl.DateTimeFormat("en-CA", {
    timeZone: tz,
    year: "numeric",
    month: "2-digit",
    day: "2-digit",
  }).format(d);
  return iso;
}

const sentToday = new Set();
function makeOncePerDayKey(invoiceId, ymd) {
  return `${invoiceId}:${ymd}`;
}

export const autoGenerateDriverInvoice = async (companyId) => {
  try {
    const cronDoc = await CronJob.findOne({ companyId });
    if (!cronDoc?.driverStatement?.enabled) {
      return;
    }
    if (!cronDoc.driverStatement.notifications?.email) {
      return;
    }

    const { frequency, day, time } = cronDoc.driverStatement.timing || {};
    if (frequency !== "Weekly") {
      return;
    }

    const dow = dayToCron[day];
    if (dow == null) {
      return;
    }

    // Check if it's the correct day
    const now = new Date();
    const currentDow = now.getDay();
    if (currentDow !== dow) {
      return;
    }

    // Check time window
    const [startStr, endStr] = (time || "09:00 - 10:00")
      .split("-")
      .map((s) => s.trim());
    const { hour: sh, minute: sm } = parseTimeRange(startStr);
    const { hour: eh, minute: em } = parseTimeRange(endStr);

    const fmt = new Intl.DateTimeFormat("en-GB", {
      timeZone: SYSTEM_TZ,
      hour: "2-digit",
      minute: "2-digit",
      hour12: false,
    }).format(now);
    const [nh, nm] = fmt.split(":").map((n) => parseInt(n, 10));

    const nowMin = nh * 60 + nm;
    const startMin = sh * 60 + sm;
    const endMin = eh * 60 + em;

    if (nowMin < startMin || nowMin >= endMin) return;

    const companyData = await Company.findById(companyId).lean();
    if (!companyData) {
      return;
    }

    const invoices = await Invoice.find({
      companyId,
      invoiceType: "driver",
      status: "Unpaid",
    });

    const ymd = todayYMD(SYSTEM_TZ);
    for (const inv of invoices) {
      const to = inv?.driver?.email;
      if (!to) continue;

      const key = makeOncePerDayKey(inv._id.toString(), ymd);
      if (sentToday.has(key)) continue;
      sentToday.add(key);

      await DriverStatementEmail(
        to,
        `Your Driver Statement â€” ${inv.invoiceNumber || ""}`,
        {
          company: companyData,
          invoice: inv,
        }
      );
    }
  } catch (err) {
    console.error(`[DRIVER STATEMENTS] Error for company ${companyId}:`, err);
  }
};